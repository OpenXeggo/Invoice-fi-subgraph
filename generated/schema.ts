// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Invoice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("invoiceID", Value.fromBigInt(BigInt.zero()));
    this.set("invoiceCreator", Value.fromBytes(Bytes.empty()));
    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("tokenAmountInWei", Value.fromBigInt(BigInt.zero()));
    this.set("receiver", Value.fromBytes(Bytes.empty()));
    this.set("isPaid", Value.fromBoolean(false));
    this.set("isCancelled", Value.fromBoolean(false));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("PaidAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Invoice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Invoice entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Invoice", id.toString(), this);
    }
  }

  static load(id: string): Invoice | null {
    return changetype<Invoice | null>(store.get("Invoice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get invoiceID(): BigInt {
    let value = this.get("invoiceID");
    return value!.toBigInt();
  }

  set invoiceID(value: BigInt) {
    this.set("invoiceID", Value.fromBigInt(value));
  }

  get invoiceCreator(): Bytes {
    let value = this.get("invoiceCreator");
    return value!.toBytes();
  }

  set invoiceCreator(value: Bytes) {
    this.set("invoiceCreator", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get tokenAmountInWei(): BigInt {
    let value = this.get("tokenAmountInWei");
    return value!.toBigInt();
  }

  set tokenAmountInWei(value: BigInt) {
    this.set("tokenAmountInWei", Value.fromBigInt(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value!.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get isPaid(): boolean {
    let value = this.get("isPaid");
    return value!.toBoolean();
  }

  set isPaid(value: boolean) {
    this.set("isPaid", Value.fromBoolean(value));
  }

  get isCancelled(): boolean {
    let value = this.get("isCancelled");
    return value!.toBoolean();
  }

  set isCancelled(value: boolean) {
    this.set("isCancelled", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get PaidAt(): BigInt {
    let value = this.get("PaidAt");
    return value!.toBigInt();
  }

  set PaidAt(value: BigInt) {
    this.set("PaidAt", Value.fromBigInt(value));
  }
}
